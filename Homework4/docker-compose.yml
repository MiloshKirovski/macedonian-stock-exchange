version: "3.8"
services:
  react-app:
    build:
      context: ./untitled
    ports:
      - "3000:80"  
    environment:
      - REACT_APP_API_URL=http://localhost:8080
    networks:
      - app-network
    depends_on:
      - spring-boot-app
   
  spring-boot-app:
    build:
      context: ./demo
    ports:
      - "8080:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/stock_database
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=stefanmilos
      - SPRING_JPA_DATABASE_PLATFORM=org.hibernate.dialect.PostgreSQLDialect
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - CORS_ALLOWED_ORIGINS=http://localhost:3000
      - FLASK_API1_URL=http://technical-app:5000/calculate
      - FLASK_API2_URL=http://nlp-app:6001/nlp
      - FLASK_API3_URL=http://lstm-app:6002/price
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
      technical-app:
        condition: service_started
      lstm-app:
        condition: service_healthy
      nlp-app:
        condition: service_healthy

  technical-app:
    build:
      context: ./Indicators_Flask_Application
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - FLASK_APP=app.py
      - FLASK_ENV=development
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  lstm-app:
    build:
      context: ./LSTM_Flask_Application
      dockerfile: Dockerfile
    ports:
      - "6002:6002"
    environment:
      - FLASK_APP=app.py
      - FLASK_ENV=development
    volumes:
      - type: bind
        source: ./LSTM_Flask_Application/models/models
        target: /app/models/models
      - type: bind
        source: ./LSTM_Flask_Application/scalers/scalers
        target: /app/scalers/scalers
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  db:
    image: postgres:13
    container_name: stock_database
    environment:
      - POSTGRES_DB=stock_database
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=stefanmilos
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./stock_database.sql:/docker-entrypoint-initdb.d/stock_database.sql
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  nlp-app:
    build:
      context: ./NLP_Flask_Application
      dockerfile: Dockerfile
    ports:
      - "6001:6001"
    environment:
      - FLASK_APP=app.py
      - FLASK_ENV=development
    volumes:
      - type: bind
        source: ./NLP_Flask_Application/sentiment_analysis_results1.csv
        target: /app/sentiment_analysis_results1.csv
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data: